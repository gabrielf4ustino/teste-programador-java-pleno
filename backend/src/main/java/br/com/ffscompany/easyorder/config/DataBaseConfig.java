package br.com.ffscompany.easyorder.config;

import jakarta.persistence.EntityManagerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.orm.jpa.JpaTransactionManager;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.annotation.EnableTransactionManagement;

import javax.sql.DataSource;
import java.util.Properties;

/**
 * Configuration class responsible for setting up the database connection and
 * ORM configuration using Spring Data JPA with Hibernate as the JPA vendor.
 */
@Configuration
@EnableTransactionManagement // Enables Spring's annotation-driven transaction management
public class DataBaseConfig {

    // Dependency injection of the properties defined in the application.properties file
    @Value("${spring.datasource.url}")
    private String url;

    @Value("${spring.datasource.username}")
    private String username;

    @Value("${spring.datasource.password}")
    private String password;

    @Value("${spring.datasource.driver-class-name}")
    private String driverClassName;

    @Value("${spring.jpa.show-sql}")
    private boolean showSql;

    @Value("${spring.jpa.hibernate.ddl-auto}")
    private String ddlAuto;

    /**
     * Configures the bean for the DataSource using the properties defined in the
     * application.properties file.
     *
     * @return the DataSource bean
     */
    @Bean
    public DataSource dataSource() {
        DriverManagerDataSource dataSource = new DriverManagerDataSource();
        dataSource.setDriverClassName(driverClassName);
        dataSource.setUrl(url);
        dataSource.setUsername(username);
        dataSource.setPassword(password);
        return dataSource;
    }

    /**
     * Configures the bean for the EntityManagerFactory, which is responsible for
     * creating EntityManager instances, using the DataSource bean, the package
     * where the entities are located and additional properties for Hibernate.
     *
     * @return the LocalContainerEntityManagerFactoryBean bean
     */
    @Bean
    public LocalContainerEntityManagerFactoryBean entityManagerFactory() {
        LocalContainerEntityManagerFactoryBean em = new LocalContainerEntityManagerFactoryBean();
        em.setDataSource(dataSource());
        em.setPackagesToScan("br.com.ffscompany.easyorder.model"); // Defines the package where the entities are located
        em.setJpaVendorAdapter(new HibernateJpaVendorAdapter());
        em.setJpaProperties(additionalProperties()); // Defines additional properties for Hibernate
        return em;
    }

    /**
     * Configures the bean for the TransactionManager, which is responsible for
     * managing transactions between the application and the database using the
     * EntityManagerFactory bean.
     *
     * @param emf the EntityManagerFactory bean
     * @return the PlatformTransactionManager bean
     */
    @Bean
    public PlatformTransactionManager transactionManager(EntityManagerFactory emf) {
        JpaTransactionManager transactionManager = new JpaTransactionManager();
        transactionManager.setEntityManagerFactory(emf);
        return transactionManager;
    }

    /**
     * Configures additional properties for Hibernate, such as the strategy for DDL
     * generation, the default schema, the database dialect and whether to show the
     * SQL generated by Hibernate or not.
     *
     * @return a Properties object containing the additional properties
     */
    private Properties additionalProperties() {
        Properties properties = new Properties();
        properties.setProperty("hibernate.hbm2ddl.auto", ddlAuto); // Set the strategy for generating DDL
        properties.setProperty("hibernate.default_schema", "marketplace"); // Set the default schema to be used
        properties.setProperty("hibernate.dialect", "org.hibernate.dialect.PostgreSQLDialect"); // Set the database dialect
        properties.setProperty("hibernate.show_sql", String.valueOf(showSql)); // Set whether to show SQL generated by Hibernate
        return properties;
    }
}
